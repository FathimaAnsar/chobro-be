import { Schema } from "mongoose";

// User Model - Base schema for both customers and service providers
const userSchema = {
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  firstName: { type: String, required: true },
  lastName: { type: String, required: true },
  phoneNumber: { type: String, required: true },
  profilePicture: String,
  accountType: { type: String, enum: ['customer', 'provider'], required: true },
  location: {
    type: { type: String, default: 'Point' },
    coordinates: [Number], // [longitude, latitude]
  },
  createdAt: { type: Date, default: Date.now },
  isActive: { type: Boolean, default: true },
  deviceTokens: [String], // For push notifications
};

// Service Provider Profile Model
const serviceProviderSchema = {
  userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  businessName: String,
  description: String,
  categories: [{ type: Schema.Types.ObjectId, ref: 'Category' }],
  skills: [String],
  certificates: [{
    name: String,
    issuer: String,
    year: Number,
    documentUrl: String
  }],
  availability: [{
    day: { type: String, enum: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'] },
    startTime: String,
    endTime: String
  }],
  rating: { type: Number, default: 0 },
  totalReviews: { type: Number, default: 0 },
  completedTasks: { type: Number, default: 0 },
  bankDetails: {
    accountHolder: String,
    accountNumber: String,
    bankName: String,
    routingNumber: String
  }
};

// Category Model
const categorySchema = {
  name: { type: String, required: true },
  description: String,
  parent: { type: Schema.Types.ObjectId, ref: 'Category' }, // For subcategories
  icon: String,
  isActive: { type: Boolean, default: true },
  basePrice: Number, // Base price for AI pricing suggestion
  priceFactors: [{
    name: String,
    weight: Number
  }]
};

// Task Model
const taskSchema = {
  customer: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  provider: { type: Schema.Types.ObjectId, ref: 'User' },
  category: { type: Schema.Types.ObjectId, ref: 'Category', required: true },
  title: { type: String, required: true },
  description: { type: String, required: true },
  location: {
    type: { type: String, default: 'Point' },
    coordinates: [Number],
    address: String
  },
  status: {
    type: String,
    enum: ['posted', 'assigned', 'in_progress', 'completed', 'cancelled'],
    default: 'posted'
  },
  budget: {
    amount: Number,
    currency: { type: String, default: 'USD' }
  },
  scheduledDate: Date,
  completionDate: Date,
  attachments: [{
    url: String,
    type: String // image, document, etc.
  }],
  aiCategorizationTags: [String], // For NLP categorization
  aiPriceSuggestion: Number
};

// Review Model
const reviewSchema = {
  task: { type: Schema.Types.ObjectId, ref: 'Task', required: true },
  reviewer: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  reviewee: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  rating: { type: Number, required: true, min: 1, max: 5 },
  comment: String,
  createdAt: { type: Date, default: Date.now }
};

// Message Model
const messageSchema = {
  conversation: { type: Schema.Types.ObjectId, ref: 'Conversation', required: true },
  sender: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  content: { type: String, required: true },
  attachments: [{
    url: String,
    type: String
  }],
  readBy: [{ type: Schema.Types.ObjectId, ref: 'User' }],
  createdAt: { type: Date, default: Date.now }
};

// Conversation Model
const conversationSchema = {
  participants: [{ type: Schema.Types.ObjectId, ref: 'User' }],
  task: { type: Schema.Types.ObjectId, ref: 'Task' },
  lastMessage: { type: Schema.Types.ObjectId, ref: 'Message' },
  updatedAt: { type: Date, default: Date.now }
};

// Transaction Model
const transactionSchema = {
  task: { type: Schema.Types.ObjectId, ref: 'Task', required: true },
  payer: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  payee: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  amount: { type: Number, required: true },
  commission: { type: Number, required: true },
  currency: { type: String, default: 'USD' },
  status: {
    type: String,
    enum: ['pending', 'completed', 'failed', 'refunded'],
    default: 'pending'
  },
  paymentMethod: String,
  paymentId: String, // Reference to payment gateway transaction
  createdAt: { type: Date, default: Date.now }
};